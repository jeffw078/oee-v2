# soldagem/management/commands/popular_dados_iniciais.py

from django.core.management.base import BaseCommand
from django.db import transaction
from soldagem.models import TipoParada
from qualidade.models import TipoDefeito
from soldagem.models import Usuario, Soldador, Modulo, Componente

class Command(BaseCommand):
    help = 'Popula banco de dados com dados iniciais para demonstra√ß√£o'

    def handle(self, *args, **options):
        with transaction.atomic():
            self.stdout.write('üöÄ Iniciando popula√ß√£o de dados iniciais...')
            
            # 1. TIPOS DE PARADA GERAIS
            self.stdout.write('üìã Criando tipos de parada gerais...')
            tipos_parada_gerais = [
                {
                    'nome': 'Higiene Pessoal',
                    'categoria': 'geral',
                    'penaliza_oee': True,
                    'requer_senha_especial': False,
                    'cor_exibicao': '#6c757d'
                },
                {
                    'nome': 'Troca de Consum√≠veis',
                    'categoria': 'geral',
                    'penaliza_oee': True,
                    'requer_senha_especial': False,
                    'cor_exibicao': '#17a2b8'
                },
                {
                    'nome': 'Limpeza do Posto',
                    'categoria': 'geral',
                    'penaliza_oee': True,
                    'requer_senha_especial': False,
                    'cor_exibicao': '#28a745'
                },
                {
                    'nome': 'Falta de Material',
                    'categoria': 'geral',
                    'penaliza_oee': False,  # N√£o penaliza OEE
                    'requer_senha_especial': False,
                    'cor_exibicao': '#fd7e14'
                },
                {
                    'nome': 'Reuni√£o/Treinamento',
                    'categoria': 'geral',
                    'penaliza_oee': False,  # N√£o penaliza OEE
                    'requer_senha_especial': False,
                    'cor_exibicao': '#6f42c1'
                },
                {
                    'nome': 'Problema de Setup',
                    'categoria': 'geral',
                    'penaliza_oee': True,
                    'requer_senha_especial': False,
                    'cor_exibicao': '#dc3545'
                }
            ]
            
            for tipo_data in tipos_parada_gerais:
                tipo, created = TipoParada.objects.get_or_create(
                    nome=tipo_data['nome'],
                    categoria=tipo_data['categoria'],
                    defaults=tipo_data
                )
                if created:
                    self.stdout.write(f'  ‚úÖ Criado: {tipo.nome}')
                else:
                    self.stdout.write(f'  ‚ö†Ô∏è  J√° existe: {tipo.nome}')
            
            # 2. TIPOS DE PARADA DE MANUTEN√á√ÉO
            self.stdout.write('üîß Criando tipos de parada de manuten√ß√£o...')
            tipos_parada_manutencao = [
                {
                    'nome': 'Manuten√ß√£o Preventiva',
                    'categoria': 'manutencao',
                    'penaliza_oee': False,  # N√£o penaliza OEE
                    'requer_senha_especial': True,
                    'cor_exibicao': '#28a745'
                },
                {
                    'nome': 'Falha de Equipamento',
                    'categoria': 'manutencao',
                    'penaliza_oee': True,
                    'requer_senha_especial': True,
                    'cor_exibicao': '#dc3545'
                },
                {
                    'nome': 'Problema El√©trico',
                    'categoria': 'manutencao',
                    'penaliza_oee': True,
                    'requer_senha_especial': True,
                    'cor_exibicao': '#ffc107'
                },
                {
                    'nome': 'Problema de G√°s',
                    'categoria': 'manutencao',
                    'penaliza_oee': True,
                    'requer_senha_especial': True,
                    'cor_exibicao': '#17a2b8'
                },
                {
                    'nome': 'Calibra√ß√£o de Equipamento',
                    'categoria': 'manutencao',
                    'penaliza_oee': False,  # N√£o penaliza OEE
                    'requer_senha_especial': True,
                    'cor_exibicao': '#6f42c1'
                },
                {
                    'nome': 'Troca de Pe√ßas/Componentes',
                    'categoria': 'manutencao',
                    'penaliza_oee': True,
                    'requer_senha_especial': True,
                    'cor_exibicao': '#fd7e14'
                }
            ]
            
            for tipo_data in tipos_parada_manutencao:
                tipo, created = TipoParada.objects.get_or_create(
                    nome=tipo_data['nome'],
                    categoria=tipo_data['categoria'],
                    defaults=tipo_data
                )
                if created:
                    self.stdout.write(f'  ‚úÖ Criado: {tipo.nome}')
                else:
                    self.stdout.write(f'  ‚ö†Ô∏è  J√° existe: {tipo.nome}')
            
            # 3. TIPOS DE PARADA DE QUALIDADE
            self.stdout.write('üîç Criando tipos de parada de qualidade...')
            tipos_parada_qualidade = [
                {
                    'nome': 'Inspe√ß√£o de Qualidade',
                    'categoria': 'qualidade',
                    'penaliza_oee': False,  # N√£o penaliza OEE
                    'requer_senha_especial': True,
                    'cor_exibicao': '#28a745'
                },
                {
                    'nome': 'Retrabalho por Defeito',
                    'categoria': 'qualidade',
                    'penaliza_oee': True,
                    'requer_senha_especial': True,
                    'cor_exibicao': '#dc3545'
                },
                {
                    'nome': 'Auditoria de Processo',
                    'categoria': 'qualidade',
                    'penaliza_oee': False,  # N√£o penaliza OEE
                    'requer_senha_especial': True,
                    'cor_exibicao': '#17a2b8'
                }
            ]
            
            for tipo_data in tipos_parada_qualidade:
                tipo, created = TipoParada.objects.get_or_create(
                    nome=tipo_data['nome'],
                    categoria=tipo_data['categoria'],
                    defaults=tipo_data
                )
                if created:
                    self.stdout.write(f'  ‚úÖ Criado: {tipo.nome}')
                else:
                    self.stdout.write(f'  ‚ö†Ô∏è  J√° existe: {tipo.nome}')
            
            # 4. TIPOS DE DEFEITO
            self.stdout.write('üö® Criando tipos de defeito...')
            tipos_defeito = [
                {
                    'nome': 'Porosidade',
                    'descricao': 'Presen√ßa de bolhas ou cavidades na solda',
                    'cor_exibicao': '#dc3545'
                },
                {
                    'nome': 'Falta de Penetra√ß√£o',
                    'descricao': 'Solda n√£o penetrou adequadamente no material',
                    'cor_exibicao': '#fd7e14'
                },
                {
                    'nome': 'Inclus√£o de Esc√≥ria',
                    'descricao': 'Restos de esc√≥ria incorporados na solda',
                    'cor_exibicao': '#6c757d'
                },
                {
                    'nome': 'Trinca',
                    'descricao': 'Fissura ou rachadura na solda',
                    'cor_exibicao': '#721c24'
                },
                {
                    'nome': 'Mordedura',
                    'descricao': 'Entalhe no metal base junto ao cord√£o de solda',
                    'cor_exibicao': '#ffc107'
                },
                {
                    'nome': 'Respingo Excessivo',
                    'descricao': 'Excesso de respingos na regi√£o soldada',
                    'cor_exibicao': '#17a2b8'
                },
                {
                    'nome': 'Desalinhamento',
                    'descricao': 'Pe√ßas n√£o est√£o alinhadas corretamente',
                    'cor_exibicao': '#6f42c1'
                },
                {
                    'nome': 'Sobreposi√ß√£o Incorreta',
                    'descricao': 'Cord√µes de solda sobrepostos inadequadamente',
                    'cor_exibicao': '#e83e8c'
                }
            ]
            
            for defeito_data in tipos_defeito:
                defeito, created = TipoDefeito.objects.get_or_create(
                    nome=defeito_data['nome'],
                    defaults=defeito_data
                )
                if created:
                    self.stdout.write(f'  ‚úÖ Criado: {defeito.nome}')
                else:
                    self.stdout.write(f'  ‚ö†Ô∏è  J√° existe: {defeito.nome}')
            
            # 5. USU√ÅRIOS DE EXEMPLO (se n√£o existirem)
            self.stdout.write('üë• Criando usu√°rios de exemplo...')
            
            # Usu√°rio admin
            admin_user, created = Usuario.objects.get_or_create(
                username='admin',
                defaults={
                    'email': 'admin@empresa.com',
                    'nome_completo': 'Administrador do Sistema',
                    'tipo_usuario': 'admin',
                    'ativo': True
                }
            )
            if created:
                admin_user.set_password('admin123')
                admin_user.save()
                self.stdout.write('  ‚úÖ Criado usu√°rio admin (senha: admin123)')
            
            # Usu√°rio qualidade
            qual_user, created = Usuario.objects.get_or_create(
                username='qualidade',
                defaults={
                    'email': 'qualidade@empresa.com',
                    'nome_completo': 'Inspetor de Qualidade',
                    'tipo_usuario': 'qualidade',
                    'ativo': True
                }
            )
            if created:
                qual_user.set_password('qual123')
                qual_user.save()
                self.stdout.write('  ‚úÖ Criado usu√°rio qualidade (senha: qual123)')
            
            # Usu√°rio manuten√ß√£o
            manut_user, created = Usuario.objects.get_or_create(
                username='manutencao',
                defaults={
                    'email': 'manutencao@empresa.com',
                    'nome_completo': 'T√©cnico de Manuten√ß√£o',
                    'tipo_usuario': 'manutencao',
                    'ativo': True
                }
            )
            if created:
                manut_user.set_password('manut123')
                manut_user.save()
                self.stdout.write('  ‚úÖ Criado usu√°rio manuten√ß√£o (senha: manut123)')
            
            # 6. SOLDADORES DE EXEMPLO
            self.stdout.write('üë∑ Criando soldadores de exemplo...')
            soldadores_exemplo = [
                {
                    'username': 'alcionei.soldador',
                    'nome_completo': 'Alcionei Santos',
                    'senha_simplificada': '1234'
                },
                {
                    'username': 'joao.soldador',
                    'nome_completo': 'Jo√£o Silva',
                    'senha_simplificada': '5678'
                },
                {
                    'username': 'maria.soldadora',
                    'nome_completo': 'Maria Oliveira',
                    'senha_simplificada': '9101'
                }
            ]
            
            for sold_data in soldadores_exemplo:
                # Criar usu√°rio
                usuario, created = Usuario.objects.get_or_create(
                    username=sold_data['username'],
                    defaults={
                        'email': f"{sold_data['username']}@empresa.com",
                        'nome_completo': sold_data['nome_completo'],
                        'tipo_usuario': 'soldador',
                        'ativo': True
                    }
                )
                if created:
                    usuario.set_password('soldador123')
                    usuario.save()
                
                # Criar soldador
                soldador, created = Soldador.objects.get_or_create(
                    usuario=usuario,
                    defaults={
                        'senha_simplificada': sold_data['senha_simplificada'],
                        'ativo': True
                    }
                )
                if created:
                    self.stdout.write(f'  ‚úÖ Criado soldador: {soldador.usuario.nome_completo} (senha: {sold_data["senha_simplificada"]})')
                else:
                    self.stdout.write(f'  ‚ö†Ô∏è  J√° existe: {soldador.usuario.nome_completo}')
            
            # 7. M√ìDULOS DE EXEMPLO
            self.stdout.write('üèóÔ∏è Criando m√≥dulos de exemplo...')
            modulos_exemplo = [
                {'nome': 'M√≥dulo A', 'descricao': 'M√≥dulo de produ√ß√£o A', 'ordem_exibicao': 1},
                {'nome': 'M√≥dulo T', 'descricao': 'M√≥dulo de produ√ß√£o T', 'ordem_exibicao': 2},
                {'nome': 'M√≥dulo B', 'descricao': 'M√≥dulo de produ√ß√£o B', 'ordem_exibicao': 3},
                {'nome': 'M√≥dulo C', 'descricao': 'M√≥dulo de produ√ß√£o C', 'ordem_exibicao': 4}
            ]
            
            for mod_data in modulos_exemplo:
                modulo, created = Modulo.objects.get_or_create(
                    nome=mod_data['nome'],
                    defaults=mod_data
                )
                if created:
                    self.stdout.write(f'  ‚úÖ Criado: {modulo.nome}')
                else:
                    self.stdout.write(f'  ‚ö†Ô∏è  J√° existe: {modulo.nome}')
            
            # 8. COMPONENTES DE EXEMPLO
            self.stdout.write('üî© Criando componentes de exemplo...')
            componentes_exemplo = [
                {
                    'nome': 'FAIS',
                    'descricao': 'Faixa de soldagem',
                    'tempo_padrao': 15.0,
                    'considera_diametro': True,
                    'formula_calculo': 'diametro * 0.02'
                },
                {
                    'nome': 'CHAPA DA CRUZETA',
                    'descricao': 'Soldagem da chapa da cruzeta',
                    'tempo_padrao': 25.0,
                    'considera_diametro': False
                },
                {
                    'nome': 'ATERRAMENTO',
                    'descricao': 'Soldagem do aterramento',
                    'tempo_padrao': 8.0,
                    'considera_diametro': False
                },
                {
                    'nome': 'ANTIGIRO',
                    'descricao': 'Soldagem do antigiro',
                    'tempo_padrao': 12.0,
                    'considera_diametro': False
                },
                {
                    'nome': 'BASE ISOLADORA',
                    'descricao': 'Soldagem da base isoladora',
                    'tempo_padrao': 18.0,
                    'considera_diametro': False
                }
            ]
            
            for comp_data in componentes_exemplo:
                componente, created = Componente.objects.get_or_create(
                    nome=comp_data['nome'],
                    defaults=comp_data
                )
                if created:
                    self.stdout.write(f'  ‚úÖ Criado: {componente.nome}')
                else:
                    self.stdout.write(f'  ‚ö†Ô∏è  J√° existe: {componente.nome}')
            
            self.stdout.write(
                self.style.SUCCESS('üéâ Dados iniciais populados com sucesso!')
            )
            
            # Exibir resumo
            self.stdout.write('\nüìä RESUMO DOS DADOS CRIADOS:')
            self.stdout.write(f'  ‚Ä¢ Tipos de Parada Gerais: {TipoParada.objects.filter(categoria="geral").count()}')
            self.stdout.write(f'  ‚Ä¢ Tipos de Parada Manuten√ß√£o: {TipoParada.objects.filter(categoria="manutencao").count()}')
            self.stdout.write(f'  ‚Ä¢ Tipos de Parada Qualidade: {TipoParada.objects.filter(categoria="qualidade").count()}')
            self.stdout.write(f'  ‚Ä¢ Tipos de Defeito: {TipoDefeito.objects.count()}')
            self.stdout.write(f'  ‚Ä¢ Usu√°rios: {Usuario.objects.count()}')
            self.stdout.write(f'  ‚Ä¢ Soldadores: {Soldador.objects.count()}')
            self.stdout.write(f'  ‚Ä¢ M√≥dulos: {Modulo.objects.count()}')
            self.stdout.write(f'  ‚Ä¢ Componentes: {Componente.objects.count()}')
            
            self.stdout.write('\nüîë CREDENCIAIS DE ACESSO:')
            self.stdout.write('  üë§ Admin: admin / admin123')
            self.stdout.write('  üîç Qualidade: qualidade / qual123 (senha especial: qual123)')
            self.stdout.write('  üîß Manuten√ß√£o: manutencao / manut123 (senha especial: manut123)')
            self.stdout.write('  üë∑ Soldadores:')
            for soldador in Soldador.objects.all():
                self.stdout.write(f'     ‚Ä¢ {soldador.usuario.nome_completo}: {soldador.senha_simplificada}')
            
            self.stdout.write('\n‚úÖ Sistema pronto para uso!')